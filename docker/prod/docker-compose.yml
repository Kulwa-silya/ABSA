# docker/prod/docker-compose.yml
services:
  nginx:
    build:
      context: ${PWD}/nginx
      dockerfile: ${PWD}/nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${PWD}/../../backend/staticfiles:/usr/share/nginx/html/static
      - ${PWD}/nginx/nginx.conf:/etc/nginx/conf.d/default.conf # Add this line
    depends_on:
      - backend
      - frontend

  backend:
    build:
      context: ${PWD}/../..
      dockerfile: ${PWD}/../../docker/prod/backend/Dockerfile
    expose:
      - "8000"
    environment:
      - DEBUG=0
      - DJANGO_ENV=production
      - DJANGO_ALLOWED_HOSTS=185.137.122.217
      - CORS_ALLOWED_ORIGINS=http://185.137.122.217
      - POSTGRES_DB=qa_form
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db
    volumes:
      - ${PWD}/../../backend/staticfiles:/app/staticfiles
    user: "1000:1000"
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: ${PWD}/../..
      dockerfile: ${PWD}/../../docker/prod/frontend/Dockerfile
    expose:
      - "3000"
    volumes:
      - ${PWD}/../../frontend:/app
      - /app/node_modules/
      - ${PWD}/nginx/nginx.conf:/etc/nginx/conf.d/default.conf # Add this line
    user: "node:node"
    environment:
      - VITE_API_URL=http://185.137.122.217
    depends_on:
      - backend

  db:
    image: postgres:16.5-alpine3.20
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=qa_form
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_prod_data:
